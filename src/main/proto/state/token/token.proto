syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2023 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

import "basic_types.proto";
import "custom_fees.proto";

option java_package = "com.hedera.hapi.node.state.token";
// <<<pbj.java_package = "com.hedera.hapi.node.state.token">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

/**
 * First-draft representation of a Hedera Token Service token entity in the network Merkle tree.
 *
 * As with all network entities, a token has a unique entity number, which is usually given along
 * with the network's shard and realm in the form of a shard.realm.number id.
 */

message Token {
    /**
     * The unique entity number of this token.
     */
    int64 token_number = 1;
    /**
     * The name of this token.
     */
    string name = 2;
    /**
     * The symbol of this token.
     */
    string symbol = 3;
    /**
     * The number of decimal places of this token.
     */
    int32 decimals = 4;
    /**
     * The total supply of this token.
     */
    int64 total_supply = 5;
    /**
     * The treasury account number of this token.
     */
    int64 treasury_account_number = 6;
    /**
     * (Optional) The admin key of this token.
     */
    Key admin_key = 7;
    /**
     * (Optional) The kyc key of this token.
     */
    Key kyc_key = 8;
    /**
     * (Optional) The freeze key of this token.
     */
    Key freeze_key = 9;
    /**
     * (Optional) The wipe key of this token.
     */
    Key wipe_key = 10;
    /**
     * (Optional) The supply key of this token.
     */
    Key supply_key = 11;
    /**
     * (Optional) The fee schedule key of this token.
     */
    Key fee_schedule_key = 12;
    /**
     * (Optional) The pause key of this token.
     */
    Key pause_key = 13;
    /**
     * The last used serial number of this token.
     */
    int64 last_used_serial_number = 14;
    /**
     * The flag indicating if this token is deleted.
     */
    bool deleted = 15;
    /**
     * The auto renew account number of this token.
     */
    int64 auto_renew_account_number = 16;
    /**
     * The auto renew period of this token.
     */
    int64 auto_renew_secs = 17;
    /**
     * The expiration time of the token, in seconds since the epoch.
     */
    int64 expiry = 18;
    /**
     * An optional description of the token with UTF-8 encoding up to 100 bytes.
     */
    string memo = 19;
    /**
     * The maximum supply of this token.
     */
    int64 max_supply = 20;
    /**
     * The flag indicating if this token is paused.
     */
    bool paused = 21;
    /**
     * The flag indicating if this token has accounts associated to it that are frozen by default.
     */
    bool accounts_frozen_by_default = 22;
    /**
      * The flag indicating if this token has accounts associated to it that are KYC granted by default.
     */
    bool accounts_kyc_granted_by_default = 23;
    /**
     * The type of this token.
     */
    TokenType token_type = 24;
    /**
     * The supply type of this token.
     */
    TokenSupplyType supply_type = 25;
    /**
     * (Optional) The custom fees of this token.
     */
    repeated CustomFee custom_fees = 26;
}
