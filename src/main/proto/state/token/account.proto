syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2023 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

import "basic_types.proto";
import "crypto_approve_allowance.proto";

option java_package = "com.hederahashgraph.api.proto.java.state";
// <<<pbj.java_package = "com.hedera.hapi.node.state.token">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

/**
 * First-draft representation of a Hedera Token Service account entity in the network Merkle tree.
 *
 * As with all network entities, account has an unique entity number represented as shard.realm.X.
 * X can be an alias public key or an EVM address or a number.
 *
 */

message Account {
    /**
     * The unique entity number of the account. The shard and realm numbers are implied, based on the network
     * this entity came from.
     */
    int64 account_number = 1;
    /**
     * The alias to use for this account, if any.
     */
    bytes alias = 2;
    /**
     * (Optional) The key to be used to sign transactions from the account, if any.
     */
    Key key = 3;
    /**
     * The expiration time of the account, in seconds since the epoch.
     */
    int64 expiry = 4;
    /**
     * The balance of the account, in tiny-bars.
     */
    int64 tinybar_balance = 5;
    /**
     * An optional description of the account with UTF-8 encoding up to 100 bytes.
     */
    string memo = 6;
    /**
     * A boolean marking if the account has been deleted.
     */
    bool deleted = 7;
    /**
     * A boolean marking if the account is a smart contract.
     */
    bool smart_contract = 8;
    /**
     * A boolean marking if the account requires a receiver signature.
     */
    bool receiver_sig_required = 9;
    /**
     * The number of NFTs owned by the account.
     */
    int64 number_owned_nfts = 10;
    /**
     * The maximum number of tokens that can be auto-associated with the account.
     */
    int32 max_auto_associations = 11;
    /**
     * The number of used auto-association slots.
     */
    int32 used_auto_associations = 12;
    /**
     * The number of tokens associated with the account.
     */
    int32 number_associations = 13;
    /**
     * The number of tokens with a positive balance associated with the account.
     */
    int32 number_positive_balances = 14;
    /**
     * The nonce of the account, used for Ethereum interoperability.
     */
    int64 ethereum_nonce = 15;
    /**
     * The amount of hbars staked to the account.
     */
    int64 staked_to_me = 16;
    /**
     * If this account stakes to another account, its value will be -1. It will
     * be set to the time when the account starts staking to a node.
     */
    int64 stake_period_start = 17;
    /**
     * The node number or the account number this account is staked to.
     * It is negative if staking to a node and positive if staking to an account and 0 if not staking to anyone.
     * When staking to a node, it is stored as -node-1 to differentiate node 0.
     */
    int64 staked_number = 18;
    /**
     * A boolean marking if the account declines rewards.
     */
    bool decline_reward = 19;
    /**
     * The amount of hbars staked to the account at the start of the last rewarded period.
     */
    int64 stake_at_start_of_last_rewarded_period = 20;
    /**
     * (Optional) The number of an auto-renew account, in the same shard and realm as the account, that
     * has signed a transaction allowing the network to use its balance to automatically extend the account's
     * expiration time when it passes.
     */
    int64 auto_renew_account_number = 21;
    /**
     * The number of seconds the network should automatically extend the account's expiration by, if the
     * account has a valid auto-renew account, and is not deleted upon expiration.
     */
    int64 auto_renew_secs = 22;
    /**
     * If this account is a smart-contract, number of key-value pairs stored on the contract.
     */
    int32 contract_kv_pairs_number = 23;
    /**
     * (Optional) List of crypto allowances approved by the account.
     */
    repeated CryptoAllowance crypto_allowances = 24;
    /**
     * (Optional) List of non-fungible token allowances approved by the account.
     */
    repeated NftAllowance nft_allowances = 25;

    /**
     * (Optional) List of fungible token allowances approved by the account.
     */
    repeated TokenAllowance token_allowances = 26;
    /**
     * The token ID of the head of the linked list from token relations map for the account.
     */
    int64 head_token_number = 27;
    /**
     * The NftId of the head of the linked list from unique tokens map for the account.
     */
    int64 head_nft_id = 28;
    /**
      * The serial number of the head NftId of the linked list from unique tokens map for the account.
      */
    int64 head_nft_serial_number = 29;
    /**
     * The number of tokens for which this account is treasury
     */
    uint32 number_treasury_titles = 30;
    /**
     * A flag indicating if the account is expired and pending removal.
     * Only the entity expiration system task toggles this flag when it reaches this account
     * and finds it expired. Before setting the flag the system task checks if the account has
     * an auto-renew account with balance. This is done to prevent a zero-balance account with a funded
     * auto-renew account from being treated as expired in the interval between its expiration
     * and the time the system task actually auto-renews it.
     */
    bool expired_and_pending_removal = 31;
}
