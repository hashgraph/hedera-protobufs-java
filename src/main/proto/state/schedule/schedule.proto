syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2023 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

import "basic_types.proto";
import "timestamp.proto";
import "schedulable_transaction_body.proto";

option java_package = "com.hederahashgraph.api.proto.java";
// <<<pbj.java_package = "com.hedera.hapi.node.state.file">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

/**
 * First-draft representation of a Hedera Schedule Service in the network Merkle tree.
 *
 * As with all network entities, a schedule has a unique entity number, which is usually given along
 * with the network's shard and realm in the form of a shard.realm.number id.
 */
message Schedule {

    /**
     * The schedule deleted flag
     */
    bool deleted = 1;

    /**
     * The schedule executed flag
     */
    bool executed = 2;

    /**
     * The memo associated with this schedule.
     */
    string memo = 3;

    /**
     * This schedule's unique ID within the network state.
     */
    ScheduleID id = 4;

    /**
     * The schedule account for this schedule.
     */
    AccountID scheduler_account = 5;

    /**
     * The payer account for this schedule.
     */
    AccountID payer_account = 6;

    /**
      * The admin key for this schedule.
     */
    Key admin_key = 7;

    /**
      * The start time of the schedule.
     */
    Timestamp schedule_valid_start = 8;

    /**
      * The expiration time of the schedule as provided by the user.
     */
    Timestamp expiration_time_provided = 9;

    /**
      * The calculated expiration time of the schedule.
     */
    Timestamp calculated_expiration_time = 10;

    /**
      * The consensus timestamp of the transaction that executed, deleted, or expired this schedule.
     */
    Timestamp resolution_time = 11;

    /**
     * The scheduled transaction
     */
    SchedulableTransactionBody scheduled_transaction = 12;

    /**
     * The transaction body bytes
     */
    bytes body_bytes = 13;

    /**
     * All the primitive keys that have already signed this schedule.
     * The scheduled transaction will not be executed before this list is
     * sufficient to "activate" the required keys for the scheduled transaction.
     */
    repeated Key signatories = 14;
}
